{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { getCurrentUser, userLogin, userRegister } from \"./authActions\";\nconst token = localStorage.getItem(\"token\") ? localStorage.getItem(\"token\") : null;\nconst initialState = {\n  loading: false,\n  user: null,\n  token,\n  error: null\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    // login user\n    builder.addCase(userLogin.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(userLogin.fulfilled, (state, {\n      payload\n    }) => {\n      state.loading = false;\n      state.user = payload.user;\n      state.token = payload.token;\n    });\n    builder.addCase(userLogin.rejected, (state, {\n      payload\n    }) => {\n      state.loading = false;\n      state.error = payload;\n    });\n    // REGISTER user\n    builder.addCase(userRegister.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(userRegister.fulfilled, (state, {\n      payload\n    }) => {\n      state.loading = false;\n      state.user = payload.user;\n    });\n    builder.addCase(userRegister.rejected, (state, {\n      payload\n    }) => {\n      state.loading = false;\n      state.error = payload;\n    });\n    // CURRENT user\n    builder.addCase(getCurrentUser.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(getCurrentUser.fulfilled, (state, {\n      payload\n    }) => {\n      state.loading = false;\n      state.user = payload.user;\n    });\n    builder.addCase(getCurrentUser.rejected, (state, {\n      payload\n    }) => {\n      state.loading = false;\n      state.error = payload;\n    });\n  }\n});\nexport default authSlice;","map":{"version":3,"names":["createSlice","getCurrentUser","userLogin","userRegister","token","localStorage","getItem","initialState","loading","user","error","authSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","payload","rejected"],"sources":["/Users/armandeepsingh/CHITKARA/7TH SEM/PROJECTS/BLOOD BANK APP/src/redux/features/auth/authSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { getCurrentUser, userLogin, userRegister } from \"./authActions\";\n\nconst token = localStorage.getItem(\"token\")\n  ? localStorage.getItem(\"token\")\n  : null;\n\nconst initialState = {\n  loading: false,\n  user: null,\n  token,\n  error: null,\n};\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // login user\n    builder.addCase(userLogin.pending, (state) => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(userLogin.fulfilled, (state, { payload }) => {\n      state.loading = false;\n      state.user = payload.user;\n      state.token = payload.token;\n    });\n    builder.addCase(userLogin.rejected, (state, { payload }) => {\n      state.loading = false;\n      state.error = payload;\n    });\n    // REGISTER user\n    builder.addCase(userRegister.pending, (state) => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(userRegister.fulfilled, (state, { payload }) => {\n      state.loading = false;\n      state.user = payload.user;\n    });\n    builder.addCase(userRegister.rejected, (state, { payload }) => {\n      state.loading = false;\n      state.error = payload;\n    });\n    // CURRENT user\n    builder.addCase(getCurrentUser.pending, (state) => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(getCurrentUser.fulfilled, (state, { payload }) => {\n      state.loading = false;\n      state.user = payload.user;\n    });\n    builder.addCase(getCurrentUser.rejected, (state, { payload }) => {\n      state.loading = false;\n      state.error = payload;\n    });\n  },\n});\n\nexport default authSlice;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,EAAEC,SAAS,EAAEC,YAAY,QAAQ,eAAe;AAEvE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,GACvCD,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,GAC7B,IAAI;AAER,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,KAAK;EACdC,IAAI,EAAE,IAAI;EACVL,KAAK;EACLM,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,SAAS,GAAGX,WAAW,CAAC;EAC5BY,IAAI,EAAE,MAAM;EACZL,YAAY,EAAEA,YAAY;EAC1BM,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACd,SAAS,CAACe,OAAO,EAAGC,KAAK,IAAK;MAC5CA,KAAK,CAACV,OAAO,GAAG,IAAI;MACpBU,KAAK,CAACR,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC;IACFK,OAAO,CAACC,OAAO,CAACd,SAAS,CAACiB,SAAS,EAAE,CAACD,KAAK,EAAE;MAAEE;IAAQ,CAAC,KAAK;MAC3DF,KAAK,CAACV,OAAO,GAAG,KAAK;MACrBU,KAAK,CAACT,IAAI,GAAGW,OAAO,CAACX,IAAI;MACzBS,KAAK,CAACd,KAAK,GAAGgB,OAAO,CAAChB,KAAK;IAC7B,CAAC,CAAC;IACFW,OAAO,CAACC,OAAO,CAACd,SAAS,CAACmB,QAAQ,EAAE,CAACH,KAAK,EAAE;MAAEE;IAAQ,CAAC,KAAK;MAC1DF,KAAK,CAACV,OAAO,GAAG,KAAK;MACrBU,KAAK,CAACR,KAAK,GAAGU,OAAO;IACvB,CAAC,CAAC;IACF;IACAL,OAAO,CAACC,OAAO,CAACb,YAAY,CAACc,OAAO,EAAGC,KAAK,IAAK;MAC/CA,KAAK,CAACV,OAAO,GAAG,IAAI;MACpBU,KAAK,CAACR,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC;IACFK,OAAO,CAACC,OAAO,CAACb,YAAY,CAACgB,SAAS,EAAE,CAACD,KAAK,EAAE;MAAEE;IAAQ,CAAC,KAAK;MAC9DF,KAAK,CAACV,OAAO,GAAG,KAAK;MACrBU,KAAK,CAACT,IAAI,GAAGW,OAAO,CAACX,IAAI;IAC3B,CAAC,CAAC;IACFM,OAAO,CAACC,OAAO,CAACb,YAAY,CAACkB,QAAQ,EAAE,CAACH,KAAK,EAAE;MAAEE;IAAQ,CAAC,KAAK;MAC7DF,KAAK,CAACV,OAAO,GAAG,KAAK;MACrBU,KAAK,CAACR,KAAK,GAAGU,OAAO;IACvB,CAAC,CAAC;IACF;IACAL,OAAO,CAACC,OAAO,CAACf,cAAc,CAACgB,OAAO,EAAGC,KAAK,IAAK;MACjDA,KAAK,CAACV,OAAO,GAAG,IAAI;MACpBU,KAAK,CAACR,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC;IACFK,OAAO,CAACC,OAAO,CAACf,cAAc,CAACkB,SAAS,EAAE,CAACD,KAAK,EAAE;MAAEE;IAAQ,CAAC,KAAK;MAChEF,KAAK,CAACV,OAAO,GAAG,KAAK;MACrBU,KAAK,CAACT,IAAI,GAAGW,OAAO,CAACX,IAAI;IAC3B,CAAC,CAAC;IACFM,OAAO,CAACC,OAAO,CAACf,cAAc,CAACoB,QAAQ,EAAE,CAACH,KAAK,EAAE;MAAEE;IAAQ,CAAC,KAAK;MAC/DF,KAAK,CAACV,OAAO,GAAG,KAAK;MACrBU,KAAK,CAACR,KAAK,GAAGU,OAAO;IACvB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAeT,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}